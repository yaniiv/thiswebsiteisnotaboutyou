{"ast":null,"code":"var geoip = require(\"geoip-lite\");\n\nvar isLocalDevIp = function isLocalDevIp(ip) {\n  return ip === \"127.0.0.1\" || ip === \"::1\";\n};\n\nfunction getIpIfAvailable(req) {\n  // if request routed via proxy, req.ip contains x-forwarded-for original IP\n  var ip = req.ip || req.connection.remoteAddress || false; // if (isLocalDevIp(ip)) {\n  //   return false;\n  // }\n  // IPV6 address can look like ::ffff:192.168.0.1'\n\n  if (ip && ip.includes(\"::ffff:\")) {\n    ip = ip.split(\":\").reverse()[0];\n  }\n\n  return ip;\n}\n\nvar geolocationParser = function geolocationParser(req, res, next) {\n  console.log(\"geolocationParser\", geolocationParser);\n  var geoIpData;\n  var parsedIp;\n\n  if (req.query.ip) {\n    parsedIp = req.query.ip;\n  } else {\n    parsedIp = getIpIfAvailable(req);\n  } // TODO: probably remove this\n\n\n  req.parsedIp = parsedIp;\n\n  if (parsedIp) {\n    geoIpData = geoip.lookup(ip);\n    req.geoIpData = geoIpData;\n  }\n\n  next();\n};\n\nmodule.exports = geolocationParser;","map":{"version":3,"sources":["/Users/ygoldobin/yanton/thiswebsiteisnotaboutyou/geolocationParser.js"],"names":["geoip","require","isLocalDevIp","ip","getIpIfAvailable","req","connection","remoteAddress","includes","split","reverse","geolocationParser","res","next","console","log","geoIpData","parsedIp","query","lookup","module","exports"],"mappings":"AAAA,IAAMA,KAAK,GAAGC,OAAO,CAAC,YAAD,CAArB;;AAEA,IAAMC,YAAY,GAAG,SAAfA,YAAe,CAAAC,EAAE;AAAA,SAAIA,EAAE,KAAK,WAAP,IAAsBA,EAAE,KAAK,KAAjC;AAAA,CAAvB;;AAEA,SAASC,gBAAT,CAA0BC,GAA1B,EAA+B;AAC7B;AACA,MAAIF,EAAE,GAAGE,GAAG,CAACF,EAAJ,IAAUE,GAAG,CAACC,UAAJ,CAAeC,aAAzB,IAA0C,KAAnD,CAF6B,CAI7B;AACA;AACA;AACA;;AACA,MAAIJ,EAAE,IAAIA,EAAE,CAACK,QAAH,CAAY,SAAZ,CAAV,EAAkC;AAChCL,IAAAA,EAAE,GAAGA,EAAE,CAACM,KAAH,CAAS,GAAT,EAAcC,OAAd,GAAwB,CAAxB,CAAL;AACD;;AAED,SAAOP,EAAP;AACD;;AAED,IAAMQ,iBAAiB,GAAG,SAApBA,iBAAoB,CAASN,GAAT,EAAcO,GAAd,EAAmBC,IAAnB,EAAyB;AACjDC,EAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ,EAAiCJ,iBAAjC;AACA,MAAIK,SAAJ;AACA,MAAIC,QAAJ;;AAEA,MAAIZ,GAAG,CAACa,KAAJ,CAAUf,EAAd,EAAkB;AAChBc,IAAAA,QAAQ,GAAGZ,GAAG,CAACa,KAAJ,CAAUf,EAArB;AACD,GAFD,MAEO;AACLc,IAAAA,QAAQ,GAAGb,gBAAgB,CAACC,GAAD,CAA3B;AACD,GATgD,CAWjD;;;AACAA,EAAAA,GAAG,CAACY,QAAJ,GAAeA,QAAf;;AAEA,MAAIA,QAAJ,EAAc;AACZD,IAAAA,SAAS,GAAGhB,KAAK,CAACmB,MAAN,CAAahB,EAAb,CAAZ;AACAE,IAAAA,GAAG,CAACW,SAAJ,GAAgBA,SAAhB;AACD;;AAEDH,EAAAA,IAAI;AACL,CApBD;;AAsBAO,MAAM,CAACC,OAAP,GAAiBV,iBAAjB","sourcesContent":["const geoip = require(\"geoip-lite\");\n\nconst isLocalDevIp = ip => ip === \"127.0.0.1\" || ip === \"::1\";\n\nfunction getIpIfAvailable(req) {\n  // if request routed via proxy, req.ip contains x-forwarded-for original IP\n  let ip = req.ip || req.connection.remoteAddress || false;\n\n  // if (isLocalDevIp(ip)) {\n  //   return false;\n  // }\n  // IPV6 address can look like ::ffff:192.168.0.1'\n  if (ip && ip.includes(\"::ffff:\")) {\n    ip = ip.split(\":\").reverse()[0];\n  }\n\n  return ip;\n}\n\nconst geolocationParser = function(req, res, next) {\n  console.log(\"geolocationParser\", geolocationParser);\n  let geoIpData;\n  let parsedIp;\n\n  if (req.query.ip) {\n    parsedIp = req.query.ip;\n  } else {\n    parsedIp = getIpIfAvailable(req);\n  }\n\n  // TODO: probably remove this\n  req.parsedIp = parsedIp;\n\n  if (parsedIp) {\n    geoIpData = geoip.lookup(ip);\n    req.geoIpData = geoIpData;\n  }\n\n  next();\n};\n\nmodule.exports = geolocationParser;\n"]},"metadata":{},"sourceType":"script"}